"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runInterfacesGenerator = runInterfacesGenerator;
const node_fs_1 = require("node:fs");
const node_path_1 = __importDefault(require("node:path"));
const genutil_1 = require("./genutil");
const gel_1 = require("gel");
const builders_1 = require("./builders");
const generateInterfaces_1 = require("./edgeql-js/generateInterfaces");
async function runInterfacesGenerator(params) {
    const { root, options, client, schemaDir } = params;
    let outFile;
    if (options.file) {
        outFile = node_path_1.default.isAbsolute(options.file)
            ? options.file
            : node_path_1.default.join(process.cwd(), options.file);
    }
    else if (root) {
        outFile = node_path_1.default.join(root, schemaDir, "interfaces.ts");
    }
    else {
        throw new Error("No project config file found. Initialize an Gel project with\n" +
            "'gel project init' or specify an output file with '--file'");
    }
    let outputDirIsInProject = false;
    let prettyOutputDir;
    if (root) {
        const relativeOutputDir = node_path_1.default.posix.relative(root, outFile);
        outputDirIsInProject = !relativeOutputDir.startsWith("..");
        prettyOutputDir = outputDirIsInProject ? `./${relativeOutputDir}` : outFile;
    }
    else {
        prettyOutputDir = outFile;
    }
    const dir = new builders_1.DirBuilder();
    console.log(`Introspecting database schema...`);
    const types = await gel_1.$.introspect.types(client);
    const generatorParams = {
        dir,
        types,
    };
    console.log(`Generating interfaces...`);
    (0, generateInterfaces_1.generateInterfaces)(generatorParams);
    const file = dir.getPath("interfaces");
    const rendered = genutil_1.headerComment +
        file.render({
            mode: "ts",
            moduleKind: "esm",
            moduleExtension: "",
        });
    console.log(`Writing interfaces file...`);
    console.log("   " + prettyOutputDir);
    await node_fs_1.promises.writeFile(outFile, rendered);
    console.log(`Generation complete! ðŸ¤˜`);
}
