// GENERATED by @gel/generate v0.6.2

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export type $ProjectλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "updatedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "tasks": $.LinkDesc<$Task, $.Cardinality.Many, {}, false, true,  false, false>;
  "<project[is Task]": $.LinkDesc<$Task, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Project = $.ObjectType<"default::Project", $ProjectλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::Project">;
const $Project = $.makeType<$Project>(_.spec, "024501b6-212a-11f0-b23a-8b290604d469", _.syntax.literal);

const Project: $.$expr_PathNode<$.TypeSet<$Project, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Project, $.Cardinality.Many), null);

export type $TaskλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "updatedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
  "completed": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "project": $.LinkDesc<$Project, $.Cardinality.One, {}, false, false,  false, false>;
  "<tasks[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tasks": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Task = $.ObjectType<"default::Task", $TaskλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], "default::Task">;
const $Task = $.makeType<$Task>(_.spec, "b1e37a68-212e-11f0-839c-efe34685e41a", _.syntax.literal);

const Task: $.$expr_PathNode<$.TypeSet<$Task, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Task, $.Cardinality.Many), null);



export { $Project, Project, $Task, Task };

type __defaultExports = {
  "Project": typeof Project;
  "Task": typeof Task
};
const __defaultExports: __defaultExports = {
  "Project": Project,
  "Task": Task
};
export default __defaultExports;
